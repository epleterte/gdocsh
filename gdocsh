#!/bin/bash -ue
# simple interface for convenient editing of google docs with vim <3
# bash4 is probably required
# 
# Copyright (c) 2012 Christian Bryn <chr.bryn@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

## functions
function p_err {
    # print errors
    # params: <string>
    local string="${@}"
    printf "${b:-}${red:-}!! %s${t_reset:-}\n" "${string}"
}

function p_info {
    # print info
    # params: <string>
    local string="${@}"
    printf "${b:-}${yellow:-}> %s${t_reset:-}\n" "${string}"
}

function print_usage {
    cat <<EOF
Usage: ${0} [-h|-c <choice>|-n <document name>]
    -h      Print this helpful text.
    -c      Choice from indexed document list (int)
    -l      List remote documents and exit.
    -n      Document name, new or existing. If both -c and -n are specified, -n takes precedence.

Example: ${0}
         ${0} -n todo
         ${0} -c 3
EOF
}

## setup fancy terminal colors
if [ -t 1 ]; then
    exec 3>&2 2>/dev/null
    b=$( tput bold ) || true
    red=$( tput setf 4 ) || true
    green=$( tput setf 2 ) || true
    yellow=$( tput setf 6 ) || true
    blue=$( tput setaf 4 ) || true
    purple=$( tput setaf 5 ) || true
    t_reset=$( tput sgr0 ) || true
    exec 2>&3; exec 3>&-
fi

while getopts c:hln: o
do
    case $o in
        h) print_usage ; exit 0 ;;
        c) doc=$OPTARG ; list=false ;;
        l) list=true ;;
        n) newdoc=$OPTARG ; list=false ;;
    esac
done
shift $(($OPTIND-1))

## sanity check
which google >/dev/null || { p_err "'google' binary not in PATH!"; exit 1; }

## main deed
# list remote documents
IFS="
"
docarray=($(google docs list | awk -F',' '{ print $1 }'))
unset IFS
[ "${list:-}" == false ] || \
    for ((i = 0; i <= ${#docarray[@]}-1; i++)); do
        echo $i: ${docarray[$i]}
    done
[ "${list:-}" == true ] && exit 0

if [ "${newdoc:-}" == "" ]; then
    # make a valid choice - the eval is nasty but bash range builtin takes literals only 8)
    while :; do
        if [ "${doc:-}" == "" ]; then
            read -p "${b:-}${green:-}Choose document to edit (n for new):${t_reset:-} " doc
            if [[ "${doc}" == "n" ]]; then
                doc=""
                read -p "${b:-}${yellow:-}Specify name of (new/existing) document:${t_reset:-} " newdoc; 
                [ ! ${newdoc} == "" ] && break;
            fi
        fi
        p="\<$doc\>";
        [[ $(eval echo {0..$((${#docarray[@]}-1))}) =~ $p ]] && break
        p_err "not a valid choice: ${doc}"
        doc=""
    done
fi

if [ ! "${newdoc:-}" == "" ]; then
    title="${newdoc}" 
else
    title="${docarray[${doc}]}"
fi

# we're here! defaulting to a sane editor
google docs edit --title ${title:-new document} --editor ${EDITOR:-vim}
